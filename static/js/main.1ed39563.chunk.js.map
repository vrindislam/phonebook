{"version":3,"sources":["components/ContactForm/index.js","components/Contact/index.js","components/ContactList/index.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","addContact","initialFormState","firstName","lastName","phoneNumber","useState","contact","setContact","onInputChange","e","preventDefault","target","name","value","Math","random","onSubmit","className","type","placeholder","onChange","autoComplete","required","Contact","contacts","setContacts","href","onClick","filter","el","id","ContactList","sortedContacts","map","length","App","newContacts","setNewContacts","isForm","setIsForm","fieldName","sort","a","b","nameA","toLowerCase","nameB","sortedArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ed39563.chunk.js","sourcesContent":["import { useState } from 'react'\nimport './style.scss'\n\nconst ContactForm = ({ addContact }) => {\n   const initialFormState = {\n      firstName: '',\n      lastName: '',\n      phoneNumber: ''\n   }\n   const [contact, setContact] = useState(initialFormState)\n\n   const onInputChange = e => {\n      e.preventDefault();\n      const { name, value } = e.target\n      setContact({ ...contact, [name]: value, id: Math.random() * 1000 })\n   }\n\n   const onFormSubmit = e => {\n      e.preventDefault();\n      addContact(contact)\n      setContact(initialFormState)\n   }\n   return (\n      <div>\n         <h1>Add a new contact</h1>\n         <form onSubmit={onFormSubmit} className='form'>\n            <div>\n\n               <input\n                  type='text'\n                  placeholder='First name'\n                  className='form-input'\n                  name='firstName'\n                  value={contact.firstName}\n                  onChange={onInputChange}\n                  autoComplete='off'\n               />\n            </div>\n            <div>\n               <input\n                  type='text'\n                  placeholder='Last name'\n                  className='form-input'\n                  name='lastName'\n                  value={contact.lastName}\n                  onChange={onInputChange}\n                  autoComplete='off'\n               />\n            </div>\n            <div>\n               <input\n                  type='number'\n                  placeholder='Phone number'\n                  className='form-input'\n                  name='phoneNumber'\n                  value={contact.phoneNumber}\n                  onChange={onInputChange}\n                  autoComplete='off'\n                  required\n               />\n            </div>\n            <div>\n               <input className='form-submit' type='submit' value='Submit' />\n\n            </div>\n         </form>\n      </div>\n   );\n}\n\nexport default ContactForm;","const Contact = ({ contact, contacts, setContacts }) => {\n\n   const deleteHandler = () => {\n      setContacts(contacts.filter(el => el.id !== contact.id))\n   }\n\n   return (\n      <tr className='contacts-table-row'>\n         <td className='contacts-table-row-data'>{contact.firstName}</td>\n         <td className='contacts-table-row-data'>{contact.lastName}</td>\n         <td className='contacts-table-row-data'>{contact.phoneNumber}</td>\n         <td className='contacts-table-row-data actions'>\n            <a className='contacts-table-btn' href={`tel:+${contact.phoneNumber}`} ><i className=\"fas fa-phone\"></i></a>\n            <button className='contacts-table-btn' onClick={deleteHandler}><i className=\"fas fa-trash-alt\"></i></button>\n         </td>\n      </tr>\n   )\n}\n\nexport default Contact;","import './style.scss'\nimport Contact from '../Contact/index'\nconst ContactList = ({ sortedContacts, setContacts, contacts }) => {\n\n   return (\n      <>\n      <table className='contacts-table'>\n         <caption className='contacts-table-caption'>PhoneBook</caption>\n         <thead>\n            <tr className='contacts-table-heading'>\n               <th className='contacts-table-heading-column'>First Name</th>\n               <th className='contacts-table-heading-column'>Last Name</th>\n               <th className='contacts-table-heading-column'>Phone</th>\n               <th className='contacts-table-heading-column'>Actions</th>\n            </tr>\n         </thead>\n         <tbody>\n            {sortedContacts.map(contact => (\n               <Contact\n                  contacts={contacts}\n                  setContacts={setContacts}\n                  contact={contact}\n                  key={contact.id} />\n            ))}\n         </tbody>\n      </table>\n      {!sortedContacts.length && <p>Let's add someone, buddy</p>}\n      </>\n   )\n}\n\nexport default ContactList;","import './App.scss';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport { useState } from 'react';\n\nfunction App() {\n\n  const [newContacts, setNewContacts] = useState([])\n  const [isForm, setIsForm] = useState(false)\n  const addContact = contact => {\n    setNewContacts([...newContacts, contact])\n  }\n\n  const sortedArray = (contacts, fieldName = 'lastName') => {\n    return contacts.sort(function (a, b) {\n      const nameA = a[fieldName].toLowerCase(), nameB = b[fieldName].toLowerCase()\n      if (nameA < nameB)\n        return -1\n      if (nameA > nameB)\n        return 1\n      return 0\n    })\n  }\n\n  const toggleForm = () => {\n    setIsForm(!isForm)\n  }\n\n  return (\n    <div className='app-container'>\n      <div className='app-navigation'>\n        <input className='form-input search' placeholder='Search' />\n        <button className='form-submit' onClick={toggleForm}>{!isForm ? 'Add Contact' : 'Close'}</button>\n      </div>\n      {isForm && <ContactForm addContact={addContact} />}\n      <ContactList contacts={newContacts} setContacts={setNewContacts} sortedContacts={sortedArray(newContacts)} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}